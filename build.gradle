plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
	id("io.github.ladysnake.chenille") version "0.14.0"
}

version = project.mod_version;
group = project.maven_group;

base {
	archivesName = project.archives_base_name
}

chenille {
	configurePublishing {
		withLadysnakeMaven()
		withGithubRelease()
		withModrinthRelease()
	}
}

loom {
	accessWidenerPath = file("src/client/resources/effective.accesswidener")

	splitEnvironmentSourceSets()

	mods {
		"effective" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

repositories {
	// Modrinth
	maven { url "https://api.modrinth.com/maven" }

	// Veil
	maven { url "https://maven.blamejared.com/" }

	// Mod Menu
	maven { url "https://maven.terraformersmc.com/releases/" }

	// CCA
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Libraries
	modIncludeImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	modIncludeImplementation "maven.modrinth:satin-api:${project.satin_version}"
	modIncludeImplementation("foundry.veil:veil-fabric-${project.minecraft_version}:${project.veil_version}") { transitive = true }
	modIncludeImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modIncludeImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	modIncludeImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

	// Runtime mods
	modLocalImplementation "com.terraformersmc:modmenu:${mod_menu_version}"

	// iris and sodium
//	modImplementation("maven.modrinth:sodium:${project.sodium_version}")
//	modImplementation("maven.modrinth:iris:${project.iris_version}")
//	runtimeOnly("org.anarres:jcpp:${project.jcpp_version}")
//	implementation("io.github.douira:glsl-transformer:${project.glslTransformer_version}")
}

processClientResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}
